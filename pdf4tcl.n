'\"
'\" Generated from file 'pdf4tcl.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2007 Peter Spjuth
'\"
'\" -*- tcl -*- doctools manpage
.so man.macros
.TH "pdf4tcl" n 0.4 pdf4tcl "Pdf document generation"
.BS
.SH NAME
pdf4tcl \- Pdf document generation
.SH SYNOPSIS
package require \fBTcl  8.4\fR
.sp
package require \fBsnit \fR
.sp
package require \fBpdf4tcl  ?0.4?\fR
.sp
\fB::pdf4tcl::new\fR \fIobjectName\fR ?\fIoption value\fR...?
.sp
\fB::pdf4tcl::getPaperSize\fR \fIpaper\fR
.sp
\fB::pdf4tcl::getPaperSizeList\fR
.sp
\fB::pdf4tcl::getPoints\fR \fIval\fR
.sp
\fBobjectName\fR \fBmethod\fR ?\fIarg arg ...\fR?
.sp
\fIobjectName\fR \fBconfigure\fR
.sp
\fIobjectName\fR \fBconfigure\fR \fIoption\fR
.sp
\fIobjectName\fR \fBconfigure\fR \fB-option\fR \fIvalue\fR...
.sp
\fIobjectName\fR \fBcget\fR \fB-option\fR
.sp
\fIobjectName\fR \fBdestroy\fR
.sp
\fIobjectName\fR \fBstartPage\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBendPage\fR
.sp
\fIobjectName\fR \fBfinish\fR
.sp
\fIobjectName\fR \fBget\fR
.sp
\fIobjectName\fR \fBwrite\fR ?\fI-file filename\fR?
.sp
\fIobjectName\fR \fBgetDrawableArea\fR
.sp
\fIobjectName\fR \fBcanvas\fR \fIpath\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBsetFont\fR \fIsize\fR ?\fIfontname\fR?
.sp
\fIobjectName\fR \fBgetStringWidth\fR \fIstr\fR
.sp
\fIobjectName\fR \fBgetCharWidth\fR \fIchar\fR
.sp
\fIobjectName\fR \fBsetTextPosition\fR \fIx\fR \fIy\fR
.sp
\fIobjectName\fR \fBmoveTextPosition\fR \fIx\fR \fIy\fR
.sp
\fIobjectName\fR \fBnewLine\fR ?\fIspacing\fR?
.sp
\fIobjectName\fR \fBsetLineSpacing\fR \fIspacing\fR
.sp
\fIobjectName\fR \fBgetLineSpacing\fR
.sp
\fIobjectName\fR \fBtext\fR \fIstr\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBdrawTextBox\fR \fIx\fR \fIy\fR \fIwidth\fR \fIheight\fR \fIstr\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBgetFontMetric\fR \fImetric\fR
.sp
\fIobjectName\fR \fBputImage\fR \fIid\fR \fIx\fR \fIy\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBputRawImage\fR \fIdata\fR \fIx\fR \fIy\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBaddImage\fR \fIfilename\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBaddRawImage\fR \fIdata\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBsetBgColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
.sp
\fIobjectName\fR \fBsetFillColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
.sp
\fIobjectName\fR \fBsetStrokeColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
.sp
\fIobjectName\fR \fBsetLineStyle\fR \fIwidth\fR \fIargs\fR
.sp
\fIobjectName\fR \fBline\fR \fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR
.sp
\fIobjectName\fR \fBqCurve\fR \fIx1\fR \fIy1\fR \fIxc\fR \fIyc\fR \fIx2\fR \fIy2\fR
.sp
\fIobjectName\fR \fBpolygon\fR ?\fIx y\fR...? ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBcircle\fR \fIx\fR \fIy\fR \fIradius\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBoval\fR \fIx\fR \fIy\fR \fIradiusx\fR \fIradiusy\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBarc\fR \fIx\fR \fIy\fR \fIradiusx\fR \fIradiusy\fR \fIphi\fR \fIextend\fR ?\fIoption value\fR...?
.sp
\fIobjectName\fR \fBarrow\fR \fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR \fIsize\fR ?\fIangle\fR?
.sp
\fIobjectName\fR \fBrectangle\fR \fIx\fR \fIy\fR \fIwidth\fR \fIheight\fR ?\fIoption value\fR...?
.sp
.BE
.SH DESCRIPTION
This package provides a container class for
generating \fIpdf\fR documents.
.SH COORDINATES
All coordinates and distances can be expressed with or without a unit. See
\fBUNITS\fR for valid units.
When the page is configured with \fB-orient\fR set to false, origo is in
the bottom left corner. With \fB-orient\fR true, origo is in the top left
corner.
Origo is displaced to account for margins, i.e. if margins are 100,
the user coordinate (0,0) corresponds to (100,100) on the paper.
Page option \fB-orient\fR can also affect the anchor point for things like
images.
.SH UNITS
Any coordinates and distances can be expressed with or without an explicit
unit.  If no unit is given, the default unit for the document is used.
A unit may be one of
\fBmm\fR (millimeter),
\fBm\fR (millimeter),
\fBcm\fR (centimeter),
\fBc\fR (centimeter),
\fBp\fR (points) or
\fBi\fR (inches).
Commands returning coordinates or distances always return a double value
in the document's default unit.
.SH "PUBLIC API"
.SS "PACKAGE COMMANDS"
.TP
\fB::pdf4tcl::new\fR \fIobjectName\fR ?\fIoption value\fR...?
This command creates a new pdf4tcl object with an associated Tcl
command whose name is \fIobjectName\fR. This \fIobject\fR command is
explained in full detail in the sections \fBOBJECT COMMAND\fR
and \fBOBJECT METHODS\fR. The object command will be created
under the current namespace if the \fIobjectName\fR is not fully
qualified, and in the specified namespace otherwise.
If \fIobjectName\fR is %AUTO% a name will generated.
The return value is the newly created object's name.
.sp
The options and their values coming after the name of the object are
used to set the initial configuration of the object.
See \fBOBJECT CONFIGURATION\fR.
.TP
\fB::pdf4tcl::getPaperSize\fR \fIpaper\fR
This call returns the size of a named paper type, e.g. "a4".
Paper names are case insensitive.
The argument \fIpaper\fR may also be a two element list
with values as accepted by \fB::pdf4tcl::getPoints\fR.
The return value is a list with width and height in points.
.TP
\fB::pdf4tcl::getPaperSizeList\fR
This call returns the list of known paper types.
.TP
\fB::pdf4tcl::getPoints\fR \fIval\fR
This call translates a measurement to points (1/72 inch).
The format of \fIval\fR is '\fInum\fR ?\fIunit\fR?' where
\fInum\fR is a valid integer or double. See \fBUNIT\fR for valid
\fIunit\fRs.  If no \fIunit\fR is given, the value is interpreted
as points.
.SS "OBJECT COMMAND"
All commands created by \fB::pdf4tcl::new\fR have the following
general form and may be used to invoke various operations on their
pdf object.
.TP
\fBobjectName\fR \fBmethod\fR ?\fIarg arg ...\fR?
The method \fBmethod\fR and its \fIarg\fR'uments determine the exact
behavior of the command. See section \fBOBJECT METHODS\fR for
the detailed specifications.
.SS "OBJECT METHODS"
.TP
\fIobjectName\fR \fBconfigure\fR
The method returns a list of all known options and their current
values when called without any arguments.
.TP
\fIobjectName\fR \fBconfigure\fR \fIoption\fR
The method behaves like the method \fBcget\fR when called with a
single argument and returns the value of the option specified by said
argument.
.TP
\fIobjectName\fR \fBconfigure\fR \fB-option\fR \fIvalue\fR...
The method reconfigures the specified \fBoption\fRs of the object,
setting them to the associated \fIvalue\fRs, when called with an even
number of arguments, at least two.
.sp
The legal options are described in the section
\fBOBJECT CONFIGURATION\fR.
.TP
\fIobjectName\fR \fBcget\fR \fB-option\fR
This method expects a legal configuration option as argument and will
return the current value of that option for the object the method was
invoked for.
.sp
The legal configuration options are described in section
\fBOBJECT CONFIGURATION\fR.
.TP
\fIobjectName\fR \fBdestroy\fR
This method destroys the object it is invoked for.
If the \fB-file\fR option was given at object creation,
the output file will be finished and closed.
.TP
\fIobjectName\fR \fBstartPage\fR ?\fIoption value\fR...?
This method starts a new page in the document. The page will have the
default page settings for the document unless overridden by \fIoption\fR.
See \fBPAGE CONFIGURATION\fR for page settings.
This will end any ongoing page.
.TP
\fIobjectName\fR \fBendPage\fR
This method ends a page in the document.  It is normally not needed since
it is implied by e.g. \fBstartPage\fR and \fBfinish\fR.  However,
if the document is built page by page in e.g. an event driven environment
it can be good to call \fBendPage\fR explicitly to have all the page's
work finished before reentering the event loop.
.TP
\fIobjectName\fR \fBfinish\fR
This method ends the document.
This will do \fBendPage\fR if needed.
If the \fB-file\fR option was given at object creation,
the output file will be finished and closed.
.TP
\fIobjectName\fR \fBget\fR
This method returns the generated pdf.
This will do \fBendPage\fR and \fBfinish\fR if needed.
If the \fB-file\fR option was given at object creation, nothing is returned.
.TP
\fIobjectName\fR \fBwrite\fR ?\fI-file filename\fR?
This method writes the generated pdf to the given \fIfilename\fR.
If no \fIfilename\fR is given, it is written to stdout.
This will do \fBendPage\fR and \fBfinish\fR if needed.
If the \fB-file\fR option was given at object creation, an empty file
is created.
.SS "OBJECT METHODS"
.TP
\fIobjectName\fR \fBgetDrawableArea\fR
This method returns the size of the available area on the page,
after removing margins.  The return value is a list of width and height,
in the document's default unit.
.TP
\fIobjectName\fR \fBcanvas\fR \fIpath\fR ?\fIoption value\fR...?
Draws the contents of the canvas widget \fIpath\fR on the current page.
Option \fI-bbox\fR gives the area of the canvas to be drawn. Default is
the entire contents, i.e. the result of $path bbox all.
Options \fI-x\fR, \fI-y\fR, \fI-width\fR and \fI-height\fR defines
an area on the page where to place the contents. Default area starts at origo,
stretching over the drawable area of the page.
Option \fI-sticky\fR defines how to place the contents within the area.
The area is always filled in one direction, preserving aspect ratio, unless
\fI-sticky\fR defines that the other direction should be filled too.  Default
\fI-sticky\fR is \fInw\fR.
If option \fI-bg\fR is true, a background is drawn in the canvas' background
color.  Otherwise only objects are drawn.  Default is false.
.sp
Limitations:
.sp
Fonts for text items are currently limited to PDF's builtins, i.e. Helvetica,
Times and Courier. A guess is made to chose which one to use to get a reasonable
display on the page.
.sp
Option -splinesteps for lines/polygons is ignored.
.sp
Stipple offset is limited. The form x,y should work.
.sp
Window items requires Img to be present and must be visible on-screen when
the canvas is drawn.
.SS "OBJECT METHODS, TEXT"
.TP
\fIobjectName\fR \fBsetFont\fR \fIsize\fR ?\fIfontname\fR?
This method sets the font used by text drawing routines. If \fIfontname\fR
is not provided, the previously set \fIfontname\fR is kept.
.TP
\fIobjectName\fR \fBgetStringWidth\fR \fIstr\fR
This method returns the width of a string under the current font.
.TP
\fIobjectName\fR \fBgetCharWidth\fR \fIchar\fR
This method returns the width of a character under the current font.
.TP
\fIobjectName\fR \fBsetTextPosition\fR \fIx\fR \fIy\fR
Set coordinate for next text command.
.TP
\fIobjectName\fR \fBmoveTextPosition\fR \fIx\fR \fIy\fR
Move coordinate for next text command.
.TP
\fIobjectName\fR \fBnewLine\fR ?\fIspacing\fR?
Moves text coordinate down and resets x to where the latest
\fBsetTextPosition\fR was. The number of lines to move down can
be set by \fIspacing\fR. This may be any real number, including negative,
and defaults to the value set by \fBsetLineSpacing\fR.
.TP
\fIobjectName\fR \fBsetLineSpacing\fR \fIspacing\fR
Set the default line spacing used be e.g. \fBnewLine\fR.  Initially
the spacing is 1.
.TP
\fIobjectName\fR \fBgetLineSpacing\fR
Get the current default line spacing.
.TP
\fIobjectName\fR \fBtext\fR \fIstr\fR ?\fIoption value\fR...?
Draw text.
.TP
\fIobjectName\fR \fBdrawTextBox\fR \fIx\fR \fIy\fR \fIwidth\fR \fIheight\fR \fIstr\fR ?\fIoption value\fR...?
Draw text.
.TP
\fIobjectName\fR \fBgetFontMetric\fR \fImetric\fR
Get information about current font. The available \fImetric\fRs are
\fBascend\fR, \fBdescend\fR, \fBfixed\fR, \fBbboxy\fR and
\fBheight\fR.
.SS "OBJECT METHODS, IMAGES"
A limited set of image formats are directly understood by pdf4tcl, currently JPEG and some PNG formats.  To use
unsupported formats, use Tk and the Img package to load and dump images to raw format which can be fed to
\fBputRawImage\fR and \fBaddRawImage\fR.
.TP
\fIobjectName\fR \fBputImage\fR \fIid\fR \fIx\fR \fIy\fR ?\fIoption value\fR...?
Put an image on the current page. The image must have been added previously by \fBaddImage\fR or
\fBaddRawImage\fR. The \fIid\fR is the one returned from the add command.
.RS
.TP
\fB-width\fR \fIwidth\fR
Set the width of the image.  Default width is one point per pixel.  If \fIheight\fR is set but not \fIwidth\fR,
the width is selected to preserve the aspect ratio of the image.
.TP
\fB-height\fR \fIheight\fR
Set the height of the image.  Default height is one point per pixel.  If \fIwidth\fR is set but not \fIheight\fR,
the height is selected to preserve the aspect ratio of the image.
.RE
.TP
\fIobjectName\fR \fBputRawImage\fR \fIdata\fR \fIx\fR \fIy\fR ?\fIoption value\fR...?
Put an image on the current page. Works like \fBputImage\fR except that the raw image data is given directly.
.nf

  image create photo img1 -file image.gif
  set imgdata [img1 data]
  mypdf putRawImage $imgdata 60 20 -height 40

.fi
.TP
\fIobjectName\fR \fBaddImage\fR \fIfilename\fR ?\fIoption value\fR...?
Add an image to the document. Returns an id that can be used in subsequent
calls to \fBputImage\fR. Supported formats are PNG and JPEG.
.RS
.TP
\fB-id\fR \fIid\fR
Explicitly select an id for the image. The \fIid\fR must be unique within the document.
.TP
\fB-type\fR \fIname\fR
Set the image type.  This can usually be deduced from the file name, this
option helps when that is not possible.  This can be either "png" or "jpeg".
.RE
.TP
\fIobjectName\fR \fBaddRawImage\fR \fIdata\fR ?\fIoption value\fR...?
.nf

  image create photo img1 -file image.gif
  set imgdata [img1 data]
  set id [mypdf addRawImage $imgdata]
  mypdf putImage $id 20 60 -width 100

.fi
.SS "OBJECT METHODS, COLORS"
Colors can be expressed in various formats. First, as a three element list
of values in the range 0.0 to 1.0. Second, in the format #XXXXXX where
the Xes are two hexadecimal digits per color value.  Third, if Tk is available,
any color accepted by winfo rgb is accepted.
.TP
\fIobjectName\fR \fBsetBgColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
Sets the background color for text operations where -bg is true.
.TP
\fIobjectName\fR \fBsetFillColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
Sets the fill color for graphics operations, and the foreground color for
text operations.
.TP
\fIobjectName\fR \fBsetStrokeColor\fR \fIred\fR \fIgreen\fR \fIblue\fR
Sets the stroke color for graphics operations.
.SS "OBJECT METHODS, GRAPHICS"
.TP
\fIobjectName\fR \fBsetLineStyle\fR \fIwidth\fR \fIargs\fR
.TP
\fIobjectName\fR \fBline\fR \fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR
.TP
\fIobjectName\fR \fBqCurve\fR \fIx1\fR \fIy1\fR \fIxc\fR \fIyc\fR \fIx2\fR \fIy2\fR
.TP
\fIobjectName\fR \fBpolygon\fR ?\fIx y\fR...? ?\fIoption value\fR...?
.TP
\fIobjectName\fR \fBcircle\fR \fIx\fR \fIy\fR \fIradius\fR ?\fIoption value\fR...?
.TP
\fIobjectName\fR \fBoval\fR \fIx\fR \fIy\fR \fIradiusx\fR \fIradiusy\fR ?\fIoption value\fR...?
.TP
\fIobjectName\fR \fBarc\fR \fIx\fR \fIy\fR \fIradiusx\fR \fIradiusy\fR \fIphi\fR \fIextend\fR ?\fIoption value\fR...?
.TP
\fIobjectName\fR \fBarrow\fR \fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR \fIsize\fR ?\fIangle\fR?
.TP
\fIobjectName\fR \fBrectangle\fR \fIx\fR \fIy\fR \fIwidth\fR \fIheight\fR ?\fIoption value\fR...?
.SS "OBJECT CONFIGURATION"
All pdf4tcl objects understand the options from \fBPAGE CONFIGURATION\fR,
which defines default page settings when used with a pdf4tcl object.
The objects also understand the following configuration options:
.TP
\fB-compress\fR \fIboolean\fR
Pages will be zlib compressed if this option is set to true.
This requires the presence of the zlib package.
This option can only be set at object creation.
.TP
\fB-file\fR \fIfilename\fR
Continuously write pdf to \fIfilename\fR instead of storing it
in memory.
This option can only be set at object creation.
.TP
\fB-unit\fR \fIdefaultunit\fR
Defines default unit for coordinates and distances.  Any value given without
a unit is interpreted using this unit.
See \fBUNIT\fR for valid units.
Default value is "p" as in points.
This option can only be set at object creation.
.SS "PAGE CONFIGURATION"
.TP
\fB-paper\fR \fIname\fR
The argument of this option defines the paper size.
The paper size may be a string like "a4", where valid values
are available through \fB::pdf4tcl::getPaperSizeList\fR.
Paper size may also be a two element list specifying width and height.
.sp
The default value of this option is "a4".
.TP
\fB-landscape\fR \fIboolean\fR
If true, paper width and height are switched.
.sp
The default value of this option is false.
.TP
\fB-orient\fR \fIboolean\fR
This sets the orientation of the y axis of the coordinate system.
With \fB-orient\fR false, origo is in the bottom left corner.
With \fB-orient\fR true, origo is in the top left corner.
.sp
The default value of this option is true.
.TP
\fB-margin\fR \fIvalues\fR
The margin is a one, two or four element list of margins.
For one element, it specifies all margins.
Two elements specify left/right and top/bottom.
Four elements specify left, right, top and bottom.
.sp
The default value of this option is zero.
.SH EXAMPLES
.nf

  pdf4tcl::new mypdf -paper a3
  mypdf startPage
  mypdf setFont 12 Courier
  mypdf text "Hejsan" -x 50 -y 50
  mypdf write -file mypdf.pdf
  mypdf destroy

.fi
.SH "SEE ALSO"
doctools
.SH KEYWORDS
document, pdf
.SH COPYRIGHT
.nf
Copyright (c) 2007 Peter Spjuth

.fi