[comment {-*- tcl -*- doctools manpage}]
[manpage_begin pdf4tcl n 0.3]
[copyright {2007 Peter Spjuth}]
[moddesc   {Pdf document generation}]
[titledesc {Pdf document generation}]
[require Tcl 8.4]
[require snit]
[require pdf4tcl [opt 0.3]]
[description]

This package provides a container class for
generating [term {pdf}] documents.

[section {PUBLIC API}]
[subsection {PACKAGE COMMANDS}]

[list_begin definitions]

[call [cmd ::pdf4tcl::new] [arg objectName] [opt [arg "option value"]...]]

This command creates a new pdf4tcl object with an associated Tcl
command whose name is [arg objectName]. This [term object] command is
explained in full detail in the sections [sectref {OBJECT COMMAND}]
and [sectref {OBJECT METHODS}]. The object command will be created
under the current namespace if the [arg objectName] is not fully
qualified, and in the specified namespace otherwise.
If [arg objectName] is %AUTO% a name will generated.
The return value is the newly created object's name.

[nl]

The options and their values coming after the name of the object are
used to set the initial configuration of the object.
See [sectref {OBJECT CONFIGURATION}].


[call [cmd ::pdf4tcl::getPaperSize] [arg "paper"]]

This call returns the size of a named paper type, e.g. "a4".
Paper names are case insensitive.
The argument [arg "paper"] may also be a two element list
with values as accepted by [cmd ::pdf4tcl::getPoints].
The return value is a list with width and height in points.


[call [cmd ::pdf4tcl::getPaperSizeList]]

This call returns the list of known paper types.


[call [cmd ::pdf4tcl::getPoints] [arg "val"]]

This call translates a measurement to points (1/72 inch).
The format of [arg "val"] is '[arg "num"] [opt [arg "unit"]]' where
[arg "num"] is a valid integer or double. [arg "unit"] may be one of
[option "mm"] (millimeter),
[option "m"] (millimeter),
[option "cm"] (centimeter),
[option "c"] (centimeter),
[option "p"] (points) or
[option "i"] (inches).
If no [arg "unit"] is given, the value is interpreted as points.


[list_end]

[subsection {OBJECT COMMAND}]

All commands created by [cmd ::pdf4tcl::new] have the following
general form and may be used to invoke various operations on their
pdf object.

[list_begin definitions]

[call [cmd objectName] [method method] [opt [arg "arg arg ..."]]]

The method [method method] and its [arg arg]'uments determine the exact
behavior of the command. See section [sectref {OBJECT METHODS}] for
the detailed specifications.

[list_end]


[subsection {OBJECT METHODS}]

[list_begin definitions]

[call [arg objectName] [method configure]]

The method returns a list of all known options and their current
values when called without any arguments.


[call [arg objectName] [method configure] [arg option]]

The method behaves like the method [method cget] when called with a
single argument and returns the value of the option specified by said
argument.


[call [arg objectName] [method configure] [option -option] [arg value]...]

The method reconfigures the specified [option option]s of the object,
setting them to the associated [arg value]s, when called with an even
number of arguments, at least two.

[nl]

The legal options are described in the section
[sectref {OBJECT CONFIGURATION}].


[call [arg objectName] [method cget] [option -option]]

This method expects a legal configuration option as argument and will
return the current value of that option for the object the method was
invoked for.

[nl]

The legal configuration options are described in section
[sectref {OBJECT CONFIGURATION}].


[call [arg objectName] [method destroy]]

This method destroys the object it is invoked for.
If the [option -file] option was given at object creation,
the output file will be finished and closed.


[call [arg objectName] [method startPage] [opt [arg "option value"]...]]

This method starts a new page in the document. The page will have the
default page settings for the document unless overridden by [arg "option"].
See [sectref {PAGE CONFIGURATION}] for page settings.


[call [arg objectName] [method endPage]]

This method ends a page in the document.


[call [arg objectName] [method finish]]

This method ends the document.
This will do [method endPage] if needed.
If the [option -file] option was given at object creation,
the output file will be finished and closed.


[call [arg objectName] [method get]]

This method returns the generated pdf.
This will do [method endPage] and [method finish] if needed.
If the [option -file] option was given at object creation, nothing is returned.

[call [arg objectName] [method write] [opt [arg "-file filename"]]]

This method writes the generated pdf to the given [arg "filename"].
If no [arg "filename"] is given, it is written to stdout.
This will do [method endPage] and [method finish] if needed.
If the [option -file] option was given at object creation, an empty file
is created.

[call [arg objectName] [method getDrawableArea]]

This method returns the size of the available area on the page,
after removing margins.  The return value is a list of width and height,
in points.


[call [arg objectName] [method setFont] [arg "size"] [opt [arg "fontname"]]]

This method sets the font used by text drawing routines.

[call [arg objectName] [method getStringWidth] [arg "str"]]

This method returns the width of a string under the current font.

[call [arg objectName] [method getCharWidth] [arg "char"]]

This method returns the width of a character under the current font.

[call [arg objectName] [method setTextPosition] [arg "x"] [arg "y"]]

Set coordinate for next text command.

[call [arg objectName] [method newLine] [opt [arg noOfLines]]]

Moves text coordinate down and resets x to where the latest
[method setTextPosition] was. The number of lines to move down can
be set by [arg noOfLines]. This may be any real number, including negative,
and defaults to 1.

[call [arg objectName] [method drawText] [arg "str"]]

Draw text.

[call [arg objectName] [method text] [arg "str"] [opt [arg "option value"]...]]

Draw text.

[call [arg objectName] [method drawTextAt] [arg "x"] [arg "y"] [arg "str"] [opt [arg "option value"]...]]

Draw text. Deprecated. Use [method text].

[call [arg objectName] [method drawTextBox] [arg "x"] [arg "y"] [arg "width"] [arg "height"] [arg "str"] [opt [arg "option value"]...]]

Draw text.

[call [arg objectName] [method beginTextObj]]
[call [arg objectName] [method endTextObj]]
[call [arg objectName] [method closePath]]
[call [arg objectName] [method moveTo] [arg "x"] [arg "y"]]
[call [arg objectName] [method putImage] [arg "id"] [arg "x"] [arg "y"]  [opt [arg "option value"]...]]
[call [arg objectName] [method putRawImage] [arg "data"] [arg "x"] [arg "y"]  [opt [arg "option value"]...]]
[example {
  image create photo img1 -gamma 1.0 -height 0 -width 0 -file image.gif
  set imgdata [img1 data]
  mypdf putRawImage $imgdata 60 20 -height 40
}]

[call [arg objectName] [method addJpeg] [arg "filename"] [arg "id"]]
[call [arg objectName] [method getFontMetric] [arg "metric"]]

Get information about current font. The available [arg "metric"]s are
[option ascend], [option descend], [option fixed], [option bboxy] and
[option height].

[call [arg objectName] [method rotateText] [arg "angle"]]
[call [arg objectName] [method setBgColor] [arg "red"] [arg "green"] [arg "blue"]]
[call [arg objectName] [method setFillColor] [arg "red"] [arg "green"] [arg "blue"]]
[call [arg objectName] [method setStrokeColor] [arg "red"] [arg "green"] [arg "blue"]]
[call [arg objectName] [method skewText] [arg "xangle"] [arg "yangle"]]

[call [arg objectName] [method setLineStyle] [arg "width"] [arg "args"]]
[call [arg objectName] [method line] [arg "x1"] [arg "y1"] [arg "x2"] [arg "y2"]]
[call [arg objectName] [method qCurve] [arg "x1"] [arg "y1"] [arg "xc"] [arg "yc"] [arg "x2"] [arg "y2"]]
[call [arg objectName] [method polygon] [arg "isfilled"] [opt [arg "x y"]...]]
[call [arg objectName] [method circle] [arg "isfilled"] [arg "x"] [arg "y"] [arg "radius"]]
[call [arg objectName] [method arc] [arg "x"] [arg "y"] [arg "radius"] [arg "phi"] [arg "extend"]]
[call [arg objectName] [method arrow] [arg "x1"] [arg "y1"] [arg "x2"] [arg "y2"] [arg "size"] [opt [arg "angle"]]]

[call [arg objectName] [method rectangle] [arg "x"] [arg "y"] [arg "width"] [arg "height"] [opt [arg "option value"]...]]

[list_end]


[subsection {OBJECT CONFIGURATION}]

All pdf4tcl objects understand the options from [sectref {PAGE CONFIGURATION}],
which defines default page settings when used with a pdf4tcl object.
The objects also understand the following configuration options:

[list_begin opt]

[opt_def -compress [arg boolean]]

Pages will be zlib compressed if this option is set to true.
This requires the presence of the zlib package.
This option can only be set at object creation.

[opt_def -file [arg filename]]

Continuously write pdf to [arg filename] instead of storing it
in memory.
This option can only be set at object creation.

[list_end]

[subsection {PAGE CONFIGURATION}]

[list_begin opt]

[opt_def -paper [arg name]]

The argument of this option defines the paper size.
The paper size may be a string like "a4", where valid values
are available through [cmd ::pdf4tcl::getPaperSizeList].
Paper size may also be a two element list specifying width and height.
[nl]
The default value of this option is "a4".

[opt_def -landscape [arg boolean]]

If true, paper width and height are switched.
[nl]
The default value of this option is false.

[opt_def -orient [arg boolean]]

This sets the orientation of the y axis of the coordinate system.
With [option -orient] false, origo is in the bottom left corner.
With [option -orient] true, origo is in the top left corner.
[nl]
The default value of this option is true.

[opt_def -margin [arg values]]
The margin is a one, two or four element list of margins.
For one element, it specifies all margins.
Two elements specify left/right and top/bottom.
Four elements specify left, right, top and bottom.
[nl]
The default value of this option is zero.

[list_end]

[section COORDINATES]

All coordinates and distances can be expressed in the format accepted by
[cmd ::pdf4tcl::getPoints].
When the page is configured with [option -orient] set to false, origo is in
the bottom left corner. With [option -orient] true, origo is in the top left
corner.
Origo is displaced to account for margins, i.e. if margins are 100 points,
the user coordinate (0,0) corresponds to (100,100) on the paper.
Page option [option -orient] can also affect the anchor point for things like
images.

[section EXAMPLES]
[example_begin]
  pdf4tcl::new mypdf -paper a3
  mypdf startPage
  mypdf setFont 12 Courier
  mypdf drawTextAt 50 50 "Hejsan"
  mypdf write -file mypdf.pdf
  mypdf destroy
[example_end]

[see_also doctools]
[keywords pdf document]
[manpage_end]
