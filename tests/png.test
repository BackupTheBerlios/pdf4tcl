# Test PNG support                                                   -*-tcl-*-
#
# $Id: graphics.test 88 2008-01-30 09:46:00Z pspjuth $

set thisDir [file dirname [file join [pwd] [info script]]]
source [file join $thisDir init.tcl]

# These tests rely on the images from
# "PNG Suite from Willem van Schaik" available from libpng.org

set ::pngdir [file join $thisDir pngsuite]
if {![file exists [file join $::pngdir basn0g01.png]]} return

proc JpegReference {file} {
    set jpeg [file rootname $file].jpg

    exec pngtopnm $file | pnmtojpeg --quality=95 > $jpeg
    return $jpeg
}

# Produce a pdf with multiple png images lined up with referece images
proc TestPng {args} {
    package require Tk
    wm withdraw .

    set cnt 0
    set cmds {}
    foreach file $args {
        if {$cnt % 3 == 0 && $cnt != 0} {
            lappend cmds [list startPage]
        }
        set file [file join $::pngdir $file]
        set jpeg [JpegReference $file]
        set gif [file rootname $file].gif
        image create photo img1 -file $gif
        set imgdata [img1 data]
        image delete img1

        set y [expr {($cnt % 3) * 300}]
        set y2 [expr {$y + 50}]
        lappend cmds [list text [file tail $file] -x 0 -y $y]
        lappend cmds [list addImage $file -id png$cnt]
        lappend cmds [list addImage $jpeg -id jpg$cnt]
        lappend cmds [list putImage png$cnt 0 $y2 -width 200]
        lappend cmds [list putRawImage $imgdata 250 $y2 -width 200]
        lappend cmds [list putImage jpg$cnt 500 $y2 -width 200]
        incr cnt
    }
    eval mytest -orient 1 -margin 50 $cmds {{}}
}

# Test that all listed files fail to be loaded
proc TestPngFail {args} {
    pdf4tcl::new Apa
    set res ""
    foreach file $args {
        set fullfile [file join $::pngdir $file]
        set code [catch {Apa addImage $fullfile} result]
        if {$code == 0} {
            set res $file
            break
        }
    }
    Apa destroy
    return $res
}

# basn0g01    -   black & white
# basn0g02    -   2 bit (4 level) grayscale
# basn0g04    -   4 bit (16 level) grayscale
# basn0g08    -   8 bit (256 level) grayscale
# basn0g16    -   16 bit (64k level) grayscale
# basn2c08    -   3x8 bits rgb color
# basn2c16    -   3x16 bits rgb color
# basn3p01    -   1 bit (2 color) paletted
# basn3p02    -   2 bit (4 color) paletted
# basn3p04    -   4 bit (16 color) paletted
# basn3p08    -   8 bit (256 color) paletted
# basn4a08    -   8 bit grayscale + 8 bit alpha-channel
# basn4a16    -   16 bit grayscale + 16 bit alpha-channel
# basn6a08    -   3x8 bits rgb color + 8 bit alpha-channel
# basn6a16    -   3x16 bits rgb color + 16 bit alpha-channel

test png-1.1 {png} -body {
    TestPng basn0g01.png basn0g02.png basn0g04.png basn0g08.png basn0g16.png \
            basn2c08.png basn2c16.png \
            basn3p01.png basn3p02.png basn3p04.png basn3p08.png \
            basn4a08.png basn4a16.png \
            basn6a08.png basn6a16.png
} -result 1

test png-1.2 {png, unsupported colour modes} -body {
    TestPngFail \
             \

} -result {}

test png-1.3 {png, interlaced unsupported} -body {
    TestPngFail \
        basi0g01.png \
        basi0g02.png \
        basi0g04.png \
        basi0g08.png \
        basi0g16.png \
        basi2c08.png \
        basi2c16.png \
        basi3p01.png \
        basi3p02.png \
        basi3p04.png \
        basi3p08.png \
        basi4a08.png \
        basi4a16.png \
        basi6a08.png \
        basi6a16.png
} -result {}

test png-1.4 {png, bad file} -body {
    TestPngFail \
            x00n0g01.png \
            xcrn0g04.png \
            xlfn0g04.png \
            miffo_not_exist.png
} -result {}

# To make sure we exit even though Tk is loaded
exit
